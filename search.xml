<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[闭包]]></title>
      <url>/2016/07/22/%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a><center>闭包</center></h3><hr>
<p>这里分享一下自己的理解( 看了阮一峰的博客 )<br><a id="more"></a></p>
<p>从技术角度上来讲，每个函数都可以看做是一个闭包。即，函数在运行的时候，形成的一个封闭的空间</p>
<p>这要从JavaScript的作用域开始说起了。</p>
<p>在JavaScript中，变量的作用域只有 全局变量和局部变量。而根据该语言的特性，在全局作用域中是访问不到函数的私有变量的</p>
<p>例1 函数内部访问全局变量:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">1</span>;  <span class="comment">// 全局变量</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(num); <span class="comment">// 访问全局变量</span></div><div class="line">&#125;</div><div class="line">fn(); <span class="comment">// 输出 1</span></div></pre></td></tr></table></figure></p>
<p>例2 外部访问函数的局部变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> num = <span class="number">1</span>;  <span class="comment">// 声明局部变量 ( 注意一定要写 var 否则成全局变量了)</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(num);  <span class="comment">//  访问局部变量 报错 num is not defined</span></div></pre></td></tr></table></figure></p>
<p>而在JavaScript中，对象访问变量机制是先在自身找，自身没有就去父级找。向上一层一层的找上去，那么我们就有了一套解决方案，可以在函数内部再定义一个函数，用来读取父级的变量。</p>
<p>例3:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> num = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(num);  <span class="comment">// 这里可以读取到fn1中的变量 num</span></div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>既然fn2可以读取，为了让外部访问到，那么我们将fn2作为fn1的返回值返回，在外部接收，那么外部就能拿到打包好的fn1中的变量了（就好像早上下楼，发现钥匙没拿，让女朋友从窗户给你扔下楼一样！）</p>
<p>例4：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> num = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(num);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> fn2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> con = fn1();</div><div class="line">con();   <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p>上面说的是闭包的一个基本用途，其实还有一个主要用途就是让函数的变量始终保存在内存中。</p>
<p>首先得说说垃圾回收机制，在JavaScript中，垃圾是自动回收的，当一个对象没有任何引用指向它的时候，那么垃圾回收机制就认为它是可以回收的，至于什么时候收走那不确定了！<br>例5：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> num = <span class="number">1</span>;</div><div class="line">	<span class="built_in">console</span>.log(num);</div><div class="line">&#125;</div><div class="line">fn();</div></pre></td></tr></table></figure></p>
<p>例5中，fn被调用后，没有引用指向这个内存了，那么就会被GC认为是可以回收的。自然fn中的变量也会随之销毁，那么闭包是怎么做到不让GC收走的呢？</p>
<p>因为，在例4的闭包中，num 对于fn2是全局变量，所以他是不会被回收的，而 fn2 又是在 fn1中，所以fn1也是不会被回收的。所以 num 就会始终保存在内存中。<strong>也是因为这样，闭包会很消耗内存，使用不当就是造成内存泄漏</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> 闭包 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高级程序设计-第一章]]></title>
      <url>/2016/06/10/%E7%AC%AC%E4%B8%80%E7%AB%A0_JavaScript%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：最近想提升一下自己的JS，所有决定把《高级程序设计》抄写一遍，并在博客记录</strong></p>
<h3 id="本章的主要内容"><a href="#本章的主要内容" class="headerlink" title="本章的主要内容"></a>本章的主要内容</h3><hr>
<ul>
<li>javaScript 历史回顾</li>
<li>javaScript 是什么</li>
<li>javaScript 与 ECMAScript的关系</li>
<li>javaScript 的不同版本</li>
</ul>
<a id="more"></a>
<blockquote>
<p>诞生</p>
</blockquote>
<p>诞生与1995年。当时主要是用来做输入验证的。在javaScript问世之前，必须把表单提交提交到服务端，然后服务端进行验证，最后将结果返回。</p>
<h4 id="1-1-JavaScript-简史"><a href="#1-1-JavaScript-简史" class="headerlink" title="1.1 JavaScript 简史"></a>1.1 JavaScript 简史</h4><hr>
<p>当时就职于网景（Netscape）公司的布兰登·艾奇（Brendan Eich）着手为计划于1995年2月发布的Netscape Navigator 2 发布一种名为 LiveScript 的脚本语言，在服务器端较 LiveWire。为了赶时间吧，网景就和Sun公司联手，当时Java很火，所以改名为JavaScript，想借借java的火！！</p>
<h4 id="1-2-JavaScript-实现"><a href="#1-2-JavaScript-实现" class="headerlink" title="1.2 JavaScript 实现"></a>1.2 JavaScript 实现</h4><hr>
<p>一个完整的JavaScript实现应该由下列三个不同的部分组成</p>
<ol>
<li>核心（ECMAScript）<ul>
<li>由ECMA-262定义，提供核心语言功能，如它规定了这门语言的下列组成部分：语法、类型、语句、关键字、保留字、操作符、对象</li>
</ul>
</li>
<li>文档对象模型（DOM）：<ul>
<li><strong>是针对XML但是经过拓展，用于HTML的应用程序编程接口，它会把整个页面来映射成多层次的节点结构。页面中的每一个组成部分都是节点，节点又包换不同的数据类型</strong></li>
<li>DOM级别<ul>
<li>DOM 1级<ul>
<li>主要由两个部分组成 DOM核心（DOM Core）和DOM HTML。其中的DOM核心就是映射XML的文档结构，来简化对文档的任意部分的访问和操作。而DOM HTML是针对HTML的操作和方法。</li>
<li>理解两者：DOM Core是针对XML的，用来操作HTML的时候就会略显乏力，于是就在它的基础上来针对HTML进行拓展，用来专门操作HTML。就有了DOM HTML</li>
</ul>
</li>
<li>DOM 2级<ul>
<li>在DOM 1级的基础上进行了拓展，引入了一些新的模块，并开始支持CSS。引入了以下新模块：<ul>
<li>DOM 视图（DOM Views）：定义了不同文档视图的接口</li>
<li>DOM 事件（DOM Events）：定义了事件和事件处理接口</li>
<li>DOM遍历和范围 （DOM Traversal and Range）：定义了遍历和操作文档树的接口</li>
</ul>
</li>
</ul>
</li>
<li>DOM 3级<ul>
<li>进一步拓展了DOM ，引入了统一方式加载和保存文档的方式</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>浏览器对象模型（BOM）<ul>
<li>根本上说，BOM只处理浏览器窗口和框架，但是习惯把针对浏览器的JavaScript拓展算为BOM的一部分。拓展了一些功能：<ul>
<li>弹出新的浏览器窗口功能</li>
<li>移动、缩放、关闭浏览器</li>
<li><strong>提供浏览器详细信息的 navigator 对象</strong></li>
<li><strong>提供浏览器所加载页面的详细信息的 location 对象</strong></li>
<li><strong>提供用户显示器分辨率详细信息的 screen 对象</strong></li>
<li><strong>对 cookies 的支持</strong></li>
<li><strong>对 XMLHttpRequest 和IE的 ActiveXObject</strong></li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><hr>
<p>JavaScript是一种专门为页面交互而设计的脚本语言，由三个部分组成：</p>
<ul>
<li>ECMAScript: 提供核心语言</li>
<li>DOM：提供访问和操作页面内容的方法和接口</li>
<li>BOM：提供与浏览器交互的方法和接口</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 高程第一章 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[FileReader接口]]></title>
      <url>/2016/06/06/HTML5%E7%9A%84FileReader%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h3 id="HTML5的FileReader接口"><a href="#HTML5的FileReader接口" class="headerlink" title="HTML5的FileReader接口"></a><center>HTML5的FileReader接口</center></h3><hr>
<p>用来把文件读入内存，并且读取文件中的数据。FileReader接口提供了一个异步API，使用该API可以在浏览器主线程中异步访问文件系统，读取文件中的数据。</p>
<a id="more"></a>
<h4 id="1-FileReader接口的方法"><a href="#1-FileReader接口的方法" class="headerlink" title="1. FileReader接口的方法"></a>1. FileReader接口的方法</h4><pre><code>FileReader接口有4个方法，其中3个用来读取文件，另一个用来中断读取。无论读取成功或失败，方法并不会返回读取的结果，这一结果保存在result属性中。
</code></pre><table>
<thead>
<tr>
<th>方法名</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>readAsBingaryString</td>
<td>file</td>
<td>将文件读取为二进制编码</td>
</tr>
<tr>
<td>readAsText</td>
<td>file,[encoding]</td>
<td>将文件读取为文本</td>
</tr>
<tr>
<td>readAsDataURL</td>
<td>file</td>
<td>将文件读取为DataURL</td>
</tr>
<tr>
<td>abort</td>
<td>(none)</td>
<td>中断读取操作</td>
</tr>
</tbody>
</table>
<h4 id="2-FileReader接口的事件"><a href="#2-FileReader接口的事件" class="headerlink" title="2. FileReader接口的事件"></a>2. FileReader接口的事件</h4><p>FileReader接口包含了一整套完整的事件模型，用于捕获读取文件时的状态</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>onabort</td>
<td>中断</td>
</tr>
<tr>
<td>onerror</td>
<td>出错</td>
</tr>
<tr>
<td>onloadstart</td>
<td>开始</td>
</tr>
<tr>
<td>onprogress</td>
<td>正在读取</td>
</tr>
<tr>
<td>onload</td>
<td><strong>成功获取</strong></td>
</tr>
<tr>
<td>onloadend</td>
<td><strong>读取完成，无论成功失败</strong></td>
</tr>
</tbody>
</table>
<h4 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;input type=&quot;file&quot; id=&quot;file /&quot;&gt;</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;读取图像&quot; onclick=&quot;readAsDataURL()&quot; /&gt; </div><div class="line">&lt;input type=&quot;button&quot; value=&quot;读取二进制数据&quot; onclick=&quot;readAsBinaryString()&quot; /&gt; </div><div class="line">&lt;input type=&quot;button&quot; value=&quot;读取文本文件&quot; onclick=&quot;readAsText()&quot; /&gt;</div><div class="line"></div><div class="line">&lt;div id=&quot;result&quot; name=&quot;result&quot;&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"></div><div class="line">var result=document.getElementById(&quot;result&quot;);  </div><div class="line">var file=document.getElementById(&quot;file&quot;); </div><div class="line"></div><div class="line">//判断浏览器是否支持FileReader接口  </div><div class="line">if(typeof FileReader == &apos;undefined&apos;)&#123;  </div><div class="line">	result.InnerHTML=&quot;&lt;p&gt;你的浏览器不支持FileReader接口！&lt;/p&gt;&quot;;  </div><div class="line">	//使选择控件不可操作  </div><div class="line">	file.setAttribute(&quot;disabled&quot;,&quot;disabled&quot;);  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">// readAsDataURL</div><div class="line"></div><div class="line">function readAsDataURL()&#123;  </div><div class="line">	//检验是否为图像文件  </div><div class="line">	var file = document.getElementById(&quot;file&quot;).files[0];  </div><div class="line">	if(!/image\/\w+/.test(file.type))&#123;  </div><div class="line">			alert(&quot;上传的不是图片&quot;);  </div><div class="line">		   return false;  </div><div class="line">	 &#125;  </div><div class="line">	 </div><div class="line">	var reader = new FileReader();  </div><div class="line">	//将文件以Data URL形式读入页面  </div><div class="line">	reader.readAsDataURL(file);  </div><div class="line">	reader.onload=function(e)&#123;  </div><div class="line">			var result=document.getElementById(&quot;result&quot;);  </div><div class="line">			//显示文件  </div><div class="line">			 result.innerHTML=&apos;&lt;img src=&quot;&apos; + this.result +&apos;&quot; alt=&quot;&quot; /&gt;&apos;;  </div><div class="line">		 &#125;  </div><div class="line">	&#125;  </div><div class="line"></div><div class="line"></div><div class="line">// readAsBinaryString</div><div class="line"></div><div class="line">function readAsBinaryString()&#123;  </div><div class="line">		var file = document.getElementById(&quot;file&quot;).files[0];  </div><div class="line">		var reader = new FileReader();  </div><div class="line">		//将文件以二进制形式读入页面  </div><div class="line">		reader.readAsBinaryString(file);  </div><div class="line">		reader.onload=function(f)&#123;  </div><div class="line">		var result=document.getElementById(&quot;result&quot;);  </div><div class="line">			//显示文件  </div><div class="line">			result.innerHTML=this.result;  </div><div class="line">		&#125;  </div><div class="line">&#125;  </div><div class="line"></div><div class="line"></div><div class="line">// readAsText</div><div class="line"></div><div class="line">function readAsText()&#123;  </div><div class="line">		var file = document.getElementById(&quot;file&quot;).files[0];  </div><div class="line">		var reader = new FileReader();  </div><div class="line">		//将文件以文本形式读入页面  </div><div class="line">		reader.readAsText(file);  </div><div class="line">		reader.onload=function(f)&#123;  </div><div class="line">				var result=document.getElementById(&quot;result&quot;);  </div><div class="line">				//显示文件  </div><div class="line">				result.innerHTML=this.result;  </div><div class="line">		 &#125;  </div><div class="line">	&#125;  </div><div class="line"></div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> FileReader接口 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XMLHttpRequest上传文件实现进度条]]></title>
      <url>/2016/06/06/XMLHttpRequest%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
      <content type="html"><![CDATA[<h3 id="XMLHttpRequest上传文件实现进度条"><a href="#XMLHttpRequest上传文件实现进度条" class="headerlink" title="XMLHttpRequest上传文件实现进度条"></a><center>XMLHttpRequest上传文件实现进度条</center></h3><hr>
<p>XMLHttpRequest对象，传送数据的时候，有一个progress事件，用来返回进度信息。它分成上传和下载两种情况<br>１. 下载的progress事件属于XMLHttpRequest对象<br>２. 上传的progress事件属于XMLHttpRequest.upload对象。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;XMLHttpRequest上传文件进度实现&lt;/title&gt;</div><div class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">        var xhr;</div><div class="line">        var ot;//</div><div class="line">        var oloaded;</div><div class="line">        //上传文件方法</div><div class="line">        function UpladFile() &#123;</div><div class="line">            var fileObj = document.getElementById(&quot;file&quot;).files[0]; // js 获取文件对象</div><div class="line">            var url = &quot;uploadFile&quot;; // 接收上传文件的后台地址 </div><div class="line">            </div><div class="line">            var form = new FormData(); // FormData 对象</div><div class="line">            form.append(&quot;mf&quot;, fileObj); // 文件对象</div><div class="line">            </div><div class="line">            xhr = new XMLHttpRequest();  // XMLHttpRequest 对象</div><div class="line">            xhr.open(&quot;post&quot;, url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。</div><div class="line">            xhr.onload = uploadComplete; //请求完成</div><div class="line">            xhr.onerror =  uploadFailed; //请求失败</div><div class="line">            xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】</div><div class="line">            xhr.upload.onloadstart = function()&#123;//上传开始执行方法</div><div class="line">                ot = new Date().getTime();   //设置上传开始时间</div><div class="line">                oloaded = 0;//设置上传开始时，以上传的文件大小为0</div><div class="line">            &#125;;</div><div class="line">            xhr.send(form); //开始上传，发送form数据</div><div class="line">        &#125;</div><div class="line">        //上传进度实现方法，上传过程中会频繁调用该方法</div><div class="line">        function progressFunction(evt) &#123;</div><div class="line">            </div><div class="line">             var progressBar = document.getElementById(&quot;progressBar&quot;);</div><div class="line">             var percentageDiv = document.getElementById(&quot;percentage&quot;);</div><div class="line">             // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0</div><div class="line">             if (evt.lengthComputable) &#123;//</div><div class="line">                 progressBar.max = evt.total;</div><div class="line">                 progressBar.value = evt.loaded;</div><div class="line">                 percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + &quot;%&quot;;</div><div class="line">             &#125;</div><div class="line">            </div><div class="line">            var time = document.getElementById(&quot;time&quot;);</div><div class="line">            var nt = new Date().getTime();//获取当前时间</div><div class="line">            var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s</div><div class="line">            ot = new Date().getTime(); //重新赋值时间，用于下次计算</div><div class="line">            </div><div class="line">            var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b       </div><div class="line">            oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算</div><div class="line">        </div><div class="line">            //上传速度计算</div><div class="line">            var speed = perload/pertime;//单位b/s</div><div class="line">            var bspeed = speed;</div><div class="line">            var units = &apos;b/s&apos;;//单位名称</div><div class="line">            if(speed/1024&gt;1)&#123;</div><div class="line">                speed = speed/1024;</div><div class="line">                units = &apos;k/s&apos;;</div><div class="line">            &#125;</div><div class="line">            if(speed/1024&gt;1)&#123;</div><div class="line">                speed = speed/1024;</div><div class="line">                units = &apos;M/s&apos;;</div><div class="line">            &#125;</div><div class="line">            speed = speed.toFixed(1);</div><div class="line">            //剩余时间</div><div class="line">            var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);</div><div class="line">            time.innerHTML = &apos;，速度：&apos;+speed+units+&apos;，剩余时间：&apos;+resttime+&apos;s&apos;;</div><div class="line">               if(bspeed==0)</div><div class="line">                time.innerHTML = &apos;上传已取消&apos;;</div><div class="line">        &#125;</div><div class="line">        //上传成功响应</div><div class="line">        function uploadComplete(evt) &#123;</div><div class="line">         //服务断接收完文件返回的结果</div><div class="line">         //    alert(evt.target.responseText);</div><div class="line">             alert(&quot;上传成功！&quot;);</div><div class="line">        &#125;</div><div class="line">        //上传失败</div><div class="line">        function uploadFailed(evt) &#123;</div><div class="line">            alert(&quot;上传失败！&quot;);</div><div class="line">        &#125;</div><div class="line">          //取消上传</div><div class="line">        function cancleUploadFile()&#123;</div><div class="line">            xhr.abort();</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;progress id=&quot;progressBar&quot; value=&quot;0&quot; max=&quot;100&quot; style=&quot;width: 300px;&quot;&gt;&lt;/progress&gt;</div><div class="line">    &lt;span id=&quot;percentage&quot;&gt;&lt;/span&gt;&lt;span id=&quot;time&quot;&gt;&lt;/span&gt;</div><div class="line">    &lt;br /&gt;&lt;br /&gt;</div><div class="line">    &lt;input type=&quot;file&quot; id=&quot;file&quot; name=&quot;myfile&quot; /&gt;</div><div class="line">    &lt;input type=&quot;button&quot; onclick=&quot;UpladFile()&quot; value=&quot;上传&quot; /&gt;</div><div class="line">    &lt;input type=&quot;button&quot; onclick=&quot;cancleUploadFile()&quot; value=&quot;取消&quot; /&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>若想用jQuery 中的ajax实现的话，jQuery的 ajax 方法没有关于 progress 事件的操作，此时需要调用的XMLHttpRequest对象是指定progress 事件。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    type: &quot;POST&quot;,</div><div class="line">　　url: &quot;upload&quot;,</div><div class="line">　　data: formData ,　　//这里上传的数据使用了formData 对象</div><div class="line">　　processData : false, </div><div class="line">　　//必须false才会自动加上正确的Content-Type </div><div class="line">　　contentType : false , </div><div class="line">　　　　</div><div class="line">　　//这里我们先拿到jQuery产生的 XMLHttpRequest对象，为其增加 progress 事件绑定，然后再返回交给ajax使用</div><div class="line">　　xhr: function()&#123;</div><div class="line">　　　　var xhr = $.ajaxSettings.xhr();</div><div class="line">　　　　if(onprogress &amp;&amp; xhr.upload) &#123;</div><div class="line">　　　　　　xhr.upload.onprogress = progressFunction;</div><div class="line"> 　　　　　 return xhr;</div><div class="line"> 　　　 &#125;</div><div class="line"> 　 &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>下载进度条实现</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">xhr.onprogress = downloadProgress;</div><div class="line">function downloadProgress(event) &#123;//未测试</div><div class="line">    if(event.lengthComputable) &#123;</div><div class="line">        var percentComplete = event.loaded / event.total; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> XMLHttpRequest </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript_dom]]></title>
      <url>/2016/04/06/javascript-dom/</url>
      <content type="html"><![CDATA[<p><strong>写在前面:</strong><br>    本来想总结一下javascript的dom，写一些后，发现这篇文章，写的很好！该说的都说到了，自己整理了一下，转载到了这里。</p>
<a id="more"></a>
<h2 id="Javascript操作DOM常用API总结"><a href="#Javascript操作DOM常用API总结" class="headerlink" title="Javascript操作DOM常用API总结"></a><center>Javascript操作DOM常用API总结</center></h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><hr>
<p>在讲解操作DOM的api之前，首先我们来复习一下一些基本概念，这些概念是掌握api的关键，必须理解它们。</p>
<h3 id="Node类型"><a href="#Node类型" class="headerlink" title="Node类型"></a>Node类型</h3><hr>
<p>DOM1级定义了一个Node接口，该接口由DOM中所有节点类型实现。这个Node接口在JS中是作为Node类型实现的。在IE9以下版本无法访问到这个类型，JS中所有节点都继承自Node类型，都共享着相同的基本属性和方法。<br>Node有一个属性nodeType表示Node的类型，它是一个整数，其数值分别表示相应的Node类型，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Node.ELEMENT_NODE:1</div><div class="line">Node.ATTRIBUTE_NODE:2</div><div class="line">Node.TEXT_NODE:3</div><div class="line">Node.CDATA_SECTION_NODE:4</div><div class="line">Node.ENTITY_REFERENCE_NODE:5</div><div class="line">Node.ENTITY_NODE:6</div><div class="line">Node.PROCESSING_INSTRUCTION_NODE:7</div><div class="line">Node.COMMENT_NODE:8</div><div class="line">Node.DOCUMENT_NODE:9</div><div class="line">Node.DOCUMENT_TYPE_NODE:10</div><div class="line">Node.DOCUMENT_FRAGMENT_NODE:11</div><div class="line">Node.NOTATION_NODE:12</div><div class="line">假设我们要判断一个Node是不是元素，我们可以这样判断</div><div class="line"></div><div class="line">if(someNode.nodeType == 1)&#123;</div><div class="line">console.log(&quot;Node is a element&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些Node类型中，我们最常用的就是element，text，attribute，comment，document，document_fragment这几种类型。<br>我们简单来介绍一下这几种类型：</p>
<h3 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h3><hr>
<p>Element提供了对元素标签名，子节点和特性的访问，我们常用HTML元素比如div，span，a等标签就是element中的一种。Element有下面几条特性：<br>（1）nodeType为1<br>（2）nodeName为元素标签名，tagName也是返回标签名<br>（3）nodeValue为null<br>（4）parentNode可能是Document或Element<br>（5）子节点可能是Element，Text，Comment，Processing_Instruction，CDATASection或EntityReference</p>
<h3 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h3><hr>
<p>Text表示文本节点，它包含的是纯文本内容，不能包含html代码，但可以包含转义后的html代码。Text有下面的特性：<br>（1）nodeType为3<br>（2）nodeName为#text<br>（3）nodeValue为文本内容<br>（4）parentNode是一个Element<br>（5）没有子节点</p>
<h3 id="Attr类型"><a href="#Attr类型" class="headerlink" title="Attr类型"></a>Attr类型</h3><hr>
<p>Attr类型表示元素的特性，相当于元素的attributes属性中的节点，它有下面的特性：<br>（1）nodeType值为2<br>（2）nodeName是特性的名称<br>（3）nodeValue是特性的值<br>（4）parentNode为null</p>
<h3 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h3><hr>
<p>Comment表示HTML文档中的注释，它有下面的几种特征：<br>（1）nodeType为8<br>（2）nodeName为#comment<br>（3）nodeValue为注释的内容<br>（4）parentNode可能是Document或Element<br>（5）没有子节点</p>
<h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><hr>
<p>Document表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个页面，它同时也是window对象的一个属性。Document有下面的特性：<br>（1）nodeType为9<br>（2）nodeName为#document<br>（3）nodeValue为null<br>（4）parentNode为null<br>（5）子节点可能是一个DocumentType或Element</p>
<h3 id="DocumentFragment类型"><a href="#DocumentFragment类型" class="headerlink" title="DocumentFragment类型"></a>DocumentFragment类型</h3><hr>
<p>DocumentFragment是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。DocumentFragment有下面的特性：<br>（1）nodeType为11<br>（2）nodeName为#document-fragment<br>（3）nodeValue为null<br>（4）parentNode为null</p>
<p>我们简单地介绍了几种常见的Node类型，要记住，HTML中的节点并不只是包括元素节点，它还包括文本节点，注释节点等等。在这里我们只是简单地说明了几种常见的节点，想要进一步学习的同学可以查找一下相关资料。</p>
<h3 id="节点创建型API"><a href="#节点创建型API" class="headerlink" title="节点创建型API"></a>节点创建型API</h3><hr>
<p>在这里，我将常用的DOM操作api进行分类，首先要介绍的是创建型的api。这一类型的api，简而言之就是用来创建节点的。</p>
<h5 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a>createElement</h5><p>createElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签。</p>
<p>使用如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var div = document.createElement(&quot;div&quot;);</div></pre></td></tr></table></figure></p>
<p>使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未<br>加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中。</p>
<h4 id="createTextNode"><a href="#createTextNode" class="headerlink" title="createTextNode"></a>createTextNode</h4><p>createTextNode用来创建一个文本节点，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var textNode = document.createTextNode(&quot;一个TextNode&quot;);</div></pre></td></tr></table></figure>
<p>createTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中</p>
<h4 id="cloneNode"><a href="#cloneNode" class="headerlink" title="cloneNode"></a>cloneNode</h4><p>cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如<br>下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var parent = document.getElementById(&quot;parentElement&quot;); </div><div class="line">var parent2 = parent.cloneNode(true);// 传入true</div><div class="line">parent2.id = &quot;parent2&quot;;</div></pre></td></tr></table></figure></p>
<p>这段代码通过cloneNode复制了一份parent元素，其中cloneNode的参数为true，表示parent的子节点<br>被复制，如果传入false，则表示只复制了parent节点。<br>我们看看这个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;parent&quot;&gt;</div><div class="line">    我是父元素的文本</div><div class="line">    &lt;br/&gt;</div><div class="line">    &lt;span&gt;</div><div class="line">        我是子元素</div><div class="line">    &lt;/span&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;button id=&quot;btnCopy&quot;&gt;复制&lt;/button&gt;</div><div class="line"></div><div class="line">var parent = document.getElementById(&quot;parent&quot;);</div><div class="line">document.getElementById(&quot;btnCopy&quot;).onclick = function()&#123;</div><div class="line">	var parent2 = parent.cloneNode(true);</div><div class="line">	parent2.id = &quot;parent2&quot;;</div><div class="line">	document.body.appendChild(parent2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码很简单，主要是绑定button事件，事件内容是复制了一个parent，修改其id，然后添加到文档中。这里有几点要注意：<br>（1）和createElement一样，cloneNode创建的节点只是游离有html文档外的节点，要调用appendChild方法才能添加到文档树中<br>（2）如果复制的元素有id，则其副本同样会包含该id，由于id具有唯一性，所以在复制节点后必须要修改其id<br>（3）调用接收的bool参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同<br>除此之外，我们还有一个需要注意的点：</p>
<p>如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：<br>（1）如果是通过addEventListener或者比如onclick进行绑定事件，则副本节点不会绑定该事件<br>（2）如果是内联方式绑定比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div onclick=&quot;showParent()&quot;&gt;&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>这样的话，副本节点同样会触发事件。</p>
<h4 id="createDocumentFragment"><a href="#createDocumentFragment" class="headerlink" title="createDocumentFragment"></a>createDocumentFragment</h4><p>createDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment<br>表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中。<br>createDocumentFragment方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中，比如示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;ul id=&quot;list&quot;&gt;&lt;/ul&gt;</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;添加多项&quot; id=&quot;btnAdd&quot; /&gt;</div><div class="line"></div><div class="line">document.getElementById(&quot;btnAdd&quot;).onclick = function()&#123;</div><div class="line">	var list = document.getElementById(&quot;list&quot;);</div><div class="line">	for(var i = 0;i &lt; 100; i++)&#123;</div><div class="line">		var li = document.createElement(&quot;li&quot;);</div><div class="line">		li.textContent = i;</div><div class="line">		list.appendChild(li);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码将按钮绑定了一个事件，这个事件创建了100个li节点，然后依次将其添加HTML文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候就要使用createDocumentFragment了。<br>DocumentFragment不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">document.getElementById(&quot;btnAdd&quot;).onclick = function()&#123;</div><div class="line">	var list = document.getElementById(&quot;list&quot;);	</div><div class="line">	var fragment = document.createDocumentFragment();</div><div class="line"></div><div class="line">	for(var i = 0;i &lt; 100; i++)&#123;</div><div class="line">	  var li = document.createElement(&quot;li&quot;);</div><div class="line">		li.textContent = i;</div><div class="line">		fragment.appendChild(li);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	list.appendChild(fragment);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优化后的代码主要是创建了一个fragment，每次生成的li节点先添加到fragment，最后一次性添加到list，大家可以看示例</p>
<h4 id="创建型API总结"><a href="#创建型API总结" class="headerlink" title="创建型API总结"></a>创建型API总结</h4><p>创建型api主要包括createElement，createTextNode，cloneNode和createDocumentFragment四个方法，需要注意下面几点：<br>（1）它们创建的节点只是一个孤立的节点，要通过appendChild添加到文档中<br>（2）cloneNode要注意如果被复制的节点是否包含子节点以及事件绑定等问题<br>（3）使用createDocumentFragment来解决添加大量节点时的性能问题</p>
<h3 id="页面修改型API"><a href="#页面修改型API" class="headerlink" title="页面修改型API"></a>页面修改型API</h3><hr>
<p>前面我们提到创建型api，它们只是创建节点，并没有真正修改到页面内容，而是要调用appendChild来将其<br>添加到文档树中。我在这里将这类会修改到页面内容归为一类。<br>修改页面内容的api主要包括：appendChild，insertBefore，removeChild，replaceChild。</p>
<h5 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h5><p>appendChild我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方<br>法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parent.appendChild(child);</div></pre></td></tr></table></figure></p>
<p>child节点将会作为parent节点的最后一个子节点。<br>appendChild这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执<br>行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面<br>上，相当于把这个节点移动到另一个地方。我们来看例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;child&quot;&gt;</div><div class="line">    要被添加的节点</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;br/&gt;</div><div class="line">&lt;br/&gt;</div><div class="line">&lt;br/&gt;</div><div class="line">&lt;div id=&quot;parent&quot;&gt;</div><div class="line">    要移动的位置</div><div class="line">&lt;/div&gt;		</div><div class="line">&lt;input id=&quot;btnMove&quot; type=&quot;button&quot; value=&quot;移动节点&quot; /&gt;</div><div class="line"></div><div class="line">document.getElementById(&quot;btnMove&quot;).onclick = function()&#123;</div><div class="line">	var child = document.getElementById(&quot;child&quot;);</div><div class="line">	document.getElementById(&quot;parent&quot;).appendChild(child);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码主要是获取页面上的child节点，然后添加到指定位置，可以看到原本的child节点被移动到parent<br>中了。<br>这里还有一个要注意的点：如果child绑定了事件，被移动时，它依然绑定着该事件。</p>
<h4 id="insertBefore"><a href="#insertBefore" class="headerlink" title="insertBefore"></a>insertBefore</h4><p>insertBefore用来添加一个节点到一个参照节点之前，用法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parentNode.insertBefore(newNode,refNode);</div></pre></td></tr></table></figure>
<p>parentNode表示新节点被添加后的父节点<br>newNode表示要添加的节点<br>refNode表示参照节点，新节点会添加到这个节点之前<br>我们来看这个例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;parent&quot;&gt;</div><div class="line">    父节点</div><div class="line">    &lt;div id=&quot;child&quot;&gt;				</div><div class="line">        子元素</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input type=&quot;button&quot; id=&quot;insertNode&quot; value=&quot;插入节点&quot; /&gt;</div><div class="line"></div><div class="line">var parent = document.getElementById(&quot;parent&quot;);</div><div class="line">var child = document.getElementById(&quot;child&quot;);</div><div class="line">document.getElementById(&quot;insertNode&quot;).onclick = function()&#123;</div><div class="line">	var newNode = document.createElement(&quot;div&quot;);</div><div class="line">	newNode.textContent = &quot;新节点&quot;</div><div class="line">	parent.insertBefore(newNode,child);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码创建了一个新节点，然后添加到child节点之前。<br>和appendChild一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事<br>件。<br>关于第二个参数参照节点还有几个注意的地方：<br>（1）refNode是必传的，如果不传该参数会报错<br>（2）如果refNode是undefined或null，则insertBefore会将节点添加到子元素的末尾</p>
<h4 id="removeChild"><a href="#removeChild" class="headerlink" title="removeChild"></a>removeChild</h4><p>removeChild顾名思义，就是删除指定的子节点并返回，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var deletedChild = parent.removeChild(node);</div></pre></td></tr></table></figure>
<p>deletedChild指向被删除节点的引用，它等于node，被删除的节点仍然存在于内存中，可以对其进行下一步<br>操作。<br>注意：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if(node.parentNode)&#123;</div><div class="line">    node.parentNode.removeChild(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过节点自己获取节点的父节点，然后将自身删除。</p>
<h4 id="replaceChild"><a href="#replaceChild" class="headerlink" title="replaceChild"></a>replaceChild</h4><p>replaceChild用于使用一个节点替换另一个节点，用法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">parent.replaceChild(newChild,oldChild);</div></pre></td></tr></table></figure></p>
<p>newChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新<br>的位置</p>
<p>oldChild是被替换的节点</p>
<h4 id="页面修改型API总结"><a href="#页面修改型API总结" class="headerlink" title="页面修改型API总结"></a>页面修改型API总结</h4><p>页面修改型api主要是这四个接口，要注意几个特点：<br>（1）不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，<br>也就是说同一个节点不能存在于页面的多个位置<br>（2）节点本身绑定的事件会不会消失，会一直保留着。</p>
<h3 id="节点查询型API"><a href="#节点查询型API" class="headerlink" title="节点查询型API"></a>节点查询型API</h3><hr>
<p>节点查询型API也是非常常用的api，下面我们分别说明一下每一个api的使用。</p>
<h5 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById"></a>document.getElementById</h5><p>这个接口很简单，根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null。<br>使用这个接口有几点要注意：</p>
<p>（1）元素的Id是大小写敏感的，一定要写对元素的id<br>（2）HTML文档中可能存在多个id相同的元素，则返回第一个元素<br>（3）只从文档中进行搜索元素，如果创建了一个元素并指定id，但并没有添加到文档中，则这个元素是不会<br>被查找到的</p>
<h4 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName"></a>document.getElementsByTagName</h4><p>这个接口根据元素标签名获取元素，返回一个即时的HTMLCollection类型，什么是即时的HTMLCollection类型呢？我们来看看这个示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;div1&lt;/div&gt;</div><div class="line">&lt;div&gt;div2&lt;/div&gt;</div><div class="line">		</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;显示数量&quot; id=&quot;btnShowCount&quot;/&gt;</div><div class="line">&lt;input type=&quot;button&quot; value=&quot;新增div&quot; id=&quot;btnAddDiv&quot;/&gt;	</div><div class="line"></div><div class="line">var divList = document.getElementsByTagName(&quot;div&quot;);</div><div class="line">document.getElementById(&quot;btnAddDiv&quot;).onclick = function()&#123;</div><div class="line">	var div = document.createElement(&quot;div&quot;);</div><div class="line">	div.textContent =&quot;div&quot; + (divList.length+1);</div><div class="line">	document.body.appendChild(div);</div><div class="line">&#125;</div><div class="line">	</div><div class="line">document.getElementById(&quot;btnShowCount&quot;).onclick = function()&#123;</div><div class="line">        alert(divList.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码中有两个按钮，一个按钮是显示HTMLCollection元素的个数，另一个按钮可以新增一个div标签到文档中。前面提到HTMLCollcetion元素是即时的表示该集合是随时变化的，也就是是文档中有几个div，它会随时进行变化，当我们新增一个div后，再访问HTMLCollection时，就会包含这个新增的div。<br>使用document.getElementsByTagName这个方法有几点要注意：<br>（1）如果要对HTMLCollection集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率<br>（2）如果没有存在指定的标签，该接口返回的不是null，而是一个空的HTMLCollection<br>（3）“*”表示所有标签</p>
<h4 id="document-getElementsByName"><a href="#document-getElementsByName" class="headerlink" title="document.getElementsByName"></a>document.getElementsByName</h4><p>getElementsByName主要是通过指定的name属性来获取元素，它返回一个即时的NodeList对象。<br>使用这个接口主要要注意几点：<br>（1）返回对象是一个即时的NodeList，它是随时变化的<br>（2）在HTML元素中，并不是所有元素都有name属性，比如div是没有name属性的，但是如果强制设置div的name属性，它也是可以被查找到的<br>（3）在IE中，如果id设置成某个值，然后传入getElementsByName的参数值和id值一样，则这个元素是会被找到的，所以最好不好设置同样的值给id和name</p>
<h4 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName"></a>document.getElementsByClassName</h4><p>这个API是根据元素的class返回一个即时的HTMLCollection，用法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var elements = document.getElementsByClassName(names);</div></pre></td></tr></table></figure></p>
<p>这个接口有下面几点要注意：<br>（1）返回结果是一个即时的HTMLCollection，会随时根据文档结构变化<br>（2）IE9以下浏览器不支持<br>（3）如果要获取2个以上classname，可传入多个classname，每个用空格相隔，例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var elements = document.getElementsByClassName(&quot;test1 test2&quot;);</div></pre></td></tr></table></figure></p>
<h4 id="document-querySelector和document-querySelectorAll"><a href="#document-querySelector和document-querySelectorAll" class="headerlink" title="document.querySelector和document.querySelectorAll"></a>document.querySelector和document.querySelectorAll</h4><p>这两个api很相似，通过css选择器来查找元素，注意选择器要符合CSS选择器的规则。<br>首先来介绍一下document.querySelector。<br>document.querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。<br>注意，由于返回的是第一个匹配的元素，这个api使用的深度优先搜索来获取元素。我们来看这个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;span class=&quot;test&quot;&gt;第三级的span&lt;/span&gt;	</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;test&quot;&gt;			</div><div class="line">    同级的第二个div</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input type=&quot;button&quot; id=&quot;btnGet&quot; value=&quot;获取test元素&quot; /&gt;</div><div class="line"></div><div class="line">document.getElementById(&quot;btnGet&quot;).addEventListener(&quot;click&quot;,function()&#123;</div><div class="line">	var element = document.querySelector(&quot;.test&quot;);</div><div class="line">	alert(element.textContent);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这个例子很简单，就是两个class都包含“test”的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过querySelector获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素。<br>document.querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符，我们来看看下面这个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;test&quot;&gt;</div><div class="line">    class为test</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div id=&quot;test&quot;&gt;</div><div class="line">    id为test</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;input id=&quot;btnShow&quot; type=&quot;button&quot; value=&quot;显示内容&quot; /&gt;</div><div class="line"></div><div class="line">document.getElementById(&quot;btnShow&quot;).addEventListener(&quot;click&quot;,function()&#123;</div><div class="line">	var elements = document.querySelectorAll(&quot;#test,.test&quot;);	</div><div class="line">	for(var i = 0,length = elements.length;i&lt;length;i++)&#123;</div><div class="line">		alert(elements[i].textContent);</div><div class="line">	&#125;	</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>这段代码通过querySelectorAll，使用id选择器和class选择器选择了两个元素，并依次输出其内容。要注意两点：<br>（1）querySelectorAll也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关<br>（2）返回的是一个非即时的NodeList，也就是说结果不会随着文档树的变化而变化<br><strong>兼容性问题：querySelector和querySelectorAll在ie8以下的浏览器不支持。</strong></p>
<h3 id="节点关系型api"><a href="#节点关系型api" class="headerlink" title="节点关系型api"></a>节点关系型api</h3><hr>
<p>在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等，下面我们依次来看看每一种关系。</p>
<h5 id="父关系型api"><a href="#父关系型api" class="headerlink" title="父关系型api"></a>父关系型api</h5><p>parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是<br>Element，Document或DocumentFragment。  parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null</p>
<h4 id="兄弟关系型api"><a href="#兄弟关系型api" class="headerlink" title="兄弟关系型api"></a>兄弟关系型api</h4><p>previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下。<br>previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持。<br>nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本借点，与预期的不符，要进行处理一下。</p>
<p>nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持。</p>
<h4 id="子关系型api"><a href="#子关系型api" class="headerlink" title="子关系型api"></a>子关系型api</h4><p>childNodes：返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。<br>children：一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。<br>firstNode：第一个子节点<br>lastNode：最后一个子节点<br>hasChildNodes方法：可以用来判断是否包含子节点。</p>
<h3 id="元素属性型api"><a href="#元素属性型api" class="headerlink" title="元素属性型api"></a>元素属性型api</h3><hr>
<h5 id="setAttribute"><a href="#setAttribute" class="headerlink" title="setAttribute"></a>setAttribute</h5><p>setAttribute：根据名称和值修改元素的特性，用法如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(name, value);</div></pre></td></tr></table></figure></p>
<p>其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。<br>如果元素本身包含指定的特性名为属性，则可以世界访问属性进行赋值，比如下面两条代码是等价的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">element.setAttribute(&quot;id&quot;,&quot;test&quot;);</div><div class="line">element.id = &quot;test&quot;;</div></pre></td></tr></table></figure>
<h4 id="getAttribute"><a href="#getAttribute" class="headerlink" title="getAttribute"></a>getAttribute</h4><p>getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var value = element.getAttribute(&quot;id&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="元素样式型api"><a href="#元素样式型api" class="headerlink" title="元素样式型api"></a>元素样式型api</h3><hr>
<h5 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle"></a>window.getComputedStyle</h5><p>window.getComputedStyle是用来获取应用到元素后的样式，假设某个元素并未设置高度而是通过其内容将其高度撑开，这时候要获取它的高度就要用到getComputedStyle，用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var style = window.getComputedStyle(element[, pseudoElt]);</div></pre></td></tr></table></figure></p>
<p>element是要获取的元素，pseudoElt指定一个伪元素进行匹配。<br>返回的style是一个CSSStyleDeclaration对象。<br>通过style可以访问到元素计算后的样式</p>
<h4 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h4><p>getBoundingClientRect用来返回元素的大小以及相对于浏览器可视窗口的位置，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var clientRect = element.getBoundingClientRect();</div></pre></td></tr></table></figure>
<p>clientRect是一个DOMRect对象，包含left，top，right，bottom，它是相对于可视窗口的距离，滚动位置发生改变时，它们的值是会发生变化的。除了IE9以下浏览器，还包含元素的height和width等数据</p>
]]></content>
      
        
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> DOM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git的学习记录]]></title>
      <url>/2016/04/03/git/</url>
      <content type="html"><![CDATA[<h2 id="创建、添加、提交"><a href="#创建、添加、提交" class="headerlink" title="创建、添加、提交"></a>创建、添加、提交</h2><hr>
<blockquote>
<p>配置用户信息</p>
</blockquote>
<p><strong>局部配置（ 在文件夹中 ）</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name &quot;用户名&quot;</div><div class="line">git config user.email &quot;邮箱&quot;</div></pre></td></tr></table></figure></p>
<p>局部的配置信息存储在这个文件夹中的 config 文件中<br><a id="more"></a>    </p>
<p><strong>全局配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;用户信息&quot;</div><div class="line">git config --global user.email &quot;邮箱&quot;</div></pre></td></tr></table></figure></p>
<p>全局配置的信息，存储在家目录的 .gieconfig 文件中</p>
<blockquote>
<p>基本操作</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init  <span class="comment">// 创建版本库，需要注意的是，将目录切换你希望的文件夹里面进行创建</span></div><div class="line">git add . <span class="comment">// 将当前文件夹中的所有文件加入到管理的缓存中</span></div><div class="line">git commit -m <span class="string">"提交说明"</span> <span class="comment">// 将缓存中的代码一次性提交到仓库 （这个就相当于玩游戏时候存档功能）</span></div></pre></td></tr></table></figure>
<p>注意：git 只监控文件，不监控文件夹</p>
<p>总结：当文件夹被创建仓库初始化之后，该文件夹就是一个工作区，而在其中会多出一个.git文件夹 他是git的版本库，在git的版本库中，有着非常重要的 暂存区（index）,还有git会为我们自动创建的一个分支master,以及指向master的一个指针HEAD。当我们 git add 的时候，就是相当于把文件修改添加到了暂存区，然后 git commit 就是把暂存区的内容提交到了当前的分支。</p>
<p>.gittignore 文件，里面书写的文件或文件夹（写的是文件或者文件夹的路径）不会被跟踪</p>
<h2 id="查看、管理修改、撤销修改"><a href="#查看、管理修改、撤销修改" class="headerlink" title="查看、管理修改、撤销修改"></a>查看、管理修改、撤销修改</h2><hr>
<blockquote>
<p>查看</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git status <span class="comment">// 查看仓库的当前状态 （ 查看哪些文件被修改过和有无加入到缓存区 ）</span></div><div class="line">git diff <span class="comment">// 查看还没有暂存的文件更新了哪些部分  （查看文件被修改了哪些内容）</span></div><div class="line">git log <span class="comment">// 查看历史提交记录 如果嫌输出的信息太多，可以加上参数 --pretty=oneline</span></div><div class="line">git log --oneline <span class="comment">// 一行显示</span></div></pre></td></tr></table></figure>
<blockquote>
<p>退回</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard commit_id <span class="comment">// 版本退回  --hard 代表强制的更新工作区的内容</span></div></pre></td></tr></table></figure>
<ol>
<li><p>在版本退回前，可以先 git log 查看版本的历史，以便确定要退回到哪个版本</p>
</li>
<li><p>要重返未来，用 git reflog 查看命令历史，找到要回到未来的哪个版本</p>
</li>
<li><p>使用该命令也可以将已经 add 了的，但是还没有 commit 的文件回到起始状态  git reset –hard HEAD</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- fileName <span class="comment">// 把文件在工作区的修改全部撤销，有两种情况：</span></div></pre></td></tr></table></figure>
<ol>
<li><p>修改后还没有add到暂存区，那么撤销后回到了和版本库一模一样的状态</p>
</li>
<li><p>已经add到了暂存区，撤销修改回到添加到暂存区后的状态。</p>
</li>
</ol>
<p>总结：就是让文件回到最近一次git commit 或者 git add时的状态。<br>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD filename <span class="comment">// 可以撤销暂存区的修改，重新放回工作区。</span></div></pre></td></tr></table></figure>
<p>撤销修改应用场景：</p>
<p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查询分支</p>
<p><code>git branch</code></p>
<p>创建分支</p>
<p><code>git branch 分支名</code></p>
<p>切换分支</p>
<p><code>git checkout 分支名</code></p>
<p>合并 </p>
<p>若将 A 分支的东西合并到 B 分支</p>
<ol>
<li>先切换到 B 分支</li>
<li>在该分支执行命令 git merge A</li>
</ol>
<p>删除</p>
<p><code>git branch -d 分支名</code></p>
<p>冲突</p>
<p>当合并两个代码优先级相同的版本代码的时候就会出现冲突，会在命令行中爆出 confilect 要求进行修改后再处理。<br>处理完成以后再提交一次，就可以啦！ </p>
<p><strong>注意事项：每次在分支上做的修改，及得添加和提交，在切换分支之前一定要记得 再用 git status 命令查看仓库状态，保证没有没提交的文件再进行下一步操作，防止文件存错了分支导致混乱</strong></p>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><hr>
<p><strong>注意：操作之前，先 git pull 远程仓库，然后再修改</strong></p>
<ol>
<li><p>添加远程仓库( 裸仓库：即不勾选 初始化仓库的选项 )</p>
<p> 第1步：创建SSH Key </p>
<p> <code>ssh-keygen -t rsa -C &quot;GitHub注册时候的邮箱&quot;</code></p>
<p> 第2步：在本地仓库的目录下关联远程仓库</p>
<p> <code>git remote add origin git@github.com:github上的用户名/仓库名.git</code></p>
<p> 第3步：把本地仓库的所有内容推送到远程仓库上</p>
<p> <code>git push -u origin master</code><br> 第一次推送时候加上-u 后面再推送就不用了 Git会把我们本地的master分支和远程仓库上的分支关联起来</p>
</li>
<li><p>克隆远程仓库 </p>
<p> git clone git@github.com:用户名/仓库名.git </p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ngrok_apache]]></title>
      <url>/2016/03/22/Ngrok-apache/</url>
      <content type="html"><![CDATA[<p><strong>写在前面</strong>：<br>    在做移动端项目的时候，需要通过手机来访问电脑上本地的项目，同时让不在同一个局域网的其他设备也可以访问，来同时调试项目，下面这两个配合使用，就可以完美解决这个问题。</p>
<a id="more"></a>
<hr>
<h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Ngrok的使用相对简单，我使用的是 Sunny-Ngrok </div><div class="line"></div><div class="line">使用方法：</div><div class="line"></div><div class="line">	1. 去官网注册一个账号，开通一条免费的隧道</div><div class="line">	2. 根据官网的教程填写相应的东西</div><div class="line">	3. 下载安装Sunny</div><div class="line">	4. 需要注意的是，映射的端口号默认的是80 个人建议进行修改。例如：8080、8081.</div><div class="line">	</div><div class="line">启动：</div><div class="line"></div><div class="line">	注意，启动隧道需要 cd 到安装的ngrok的目录下</div><div class="line">	启动隧道</div><div class="line">	./sunny clientid 隧道id</div><div class="line">	</div><div class="line">	启动多个隧道</div><div class="line">	./sunny clientid c7fb2defb4081919,3e23d14f040b2b12</div></pre></td></tr></table></figure>
<h3 id="Mac-apache"><a href="#Mac-apache" class="headerlink" title="Mac apache"></a>Mac apache</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">1. 基本操作</div><div class="line"></div><div class="line">	MAC自带了apache，所有可以直接用</div><div class="line">	httpd -v #查看Apache版本信息</div><div class="line">	sudo apachectl start #启动</div><div class="line">	sudo apachectl stop #停止</div><div class="line">	sudo apachectl restart #重启</div><div class="line"></div><div class="line">注意：每次修改完东西，都需要重新启动apache</div><div class="line">Apache 就启动成功，站点的根目录为系统级根目录 /Library/WebServer/Documents</div><div class="line"></div><div class="line">2. 创建用户级根目录管理起来更加方便</div><div class="line">	1. 创建一个文件夹Sites</div><div class="line">	2. 查看etc/apache2/users 下是否有 username.conf文件，注意username就是你的用户名,如果没有就创建一个.</div><div class="line">	（ps: 我第一次就创建成了username.conf文件！尴尬，现在都没改过来，懒的改了）</div><div class="line">	</div><div class="line">	3. 创建完成后打开，把下面的配置信息扔进去</div><div class="line">	</div><div class="line">		 &lt;Directory &quot;/Users/yangyangyang注意这里是你的用户名/Sites/&quot;&gt;</div><div class="line">		     Options Indexes MultiViews FollowSymLinks</div><div class="line">		     AllowOverride All</div><div class="line">		     Order allow,deny</div><div class="line">		     Allow from all</div><div class="line">		     Require all granted</div><div class="line">		 &lt;/Directory&gt;</div><div class="line">		</div><div class="line">	4. 编辑 /etc/apache2/httpd.conf 文件，找到下列代码，并将前面的注释符号 # 删除：</div><div class="line"></div><div class="line">	     Include /private/etc/apache2/extra/httpd-userdir.conf</div><div class="line">	     LoadModule userdir_module libexec/apache2/mod_userdir.so</div><div class="line">	     </div><div class="line">	5. 编辑 /etc/apache2/extra/httpd-userdir.conf 文件，找到下列代码，并将前面的注释符号 # 删除：</div><div class="line">	</div><div class="line">      Include /private/etc/apache2/users/*.conf</div></pre></td></tr></table></figure>
<h3 id="etc-apache2-httpd-conf文件的一些参数"><a href="#etc-apache2-httpd-conf文件的一些参数" class="headerlink" title="/etc/apache2/httpd.conf文件的一些参数"></a>/etc/apache2/httpd.conf文件的一些参数</h3><hr>
<p>上面完成后，启动Apache，然后打开Ngrok,输入Ngrok上面产生的网址，查看是否会跳转到你修改的根目录 下，如果没有，只需要修改下面的DocumentRoot 后面改成你指定网站的根目录就可以了！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;VirtualHost *:80&gt;</div><div class="line">   DocumentRoot &quot;/path&quot; #这里指定你的网站根目录 </div><div class="line">   ServerName example.com</div><div class="line">   ErrorLog &quot;/private/var/log/apache2/sites-error_log&quot;</div><div class="line">   CustomLog &quot;/private/var/log/apache2/sites-access_log&quot; common</div><div class="line">   &lt;Directory /&gt;</div><div class="line">       Options Indexes FollowSymLinks MultiViews</div><div class="line">       AllowOverride All</div><div class="line">       #Order deny,allow</div><div class="line">       #Allow from all</div><div class="line">       Require all granted</div><div class="line">   &lt;/Directory&gt;</div><div class="line">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Ngrok </tag>
            
            <tag> apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Hexo和Github的博客]]></title>
      <url>/2016/03/05/Hexo/</url>
      <content type="html"><![CDATA[<p><strong>写在前面：</strong><br>    其实很早就有了搭建个人博客的想法，但是一直都很忙，没有顾上。也是因为本来想着自己写一个博客的页面通过Giuhub来发布，感觉需要占用挺长时间的。所有一直没动手，但是当我看到Hexo框架的时候，我心中一喜，十几分钟搭建好了自己的博客！哈哈，这里总结一下经过，大家可以参考！</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>注意，因为我使用的是MAC 命令前加了sudo来用管理权限，WIN电脑不用写sudo安装Hexo需要Node.js和git，有这两个之后直接用命令行安装Hexo<br>（PS：发现官网改命令了，回来更新下）</p>
<p><code>sudo npm install hexo-cli -g</code></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>创建一个文件夹 在命令行中将目录定位在该文件夹中，输入下面的命令（注意啊，目录一定搞清楚）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init //初始化</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>还是在该目录下执行命令：</p>
<p><code>sudo hexo generate // 可以简写为 hexo g</code></p>
<p>安装hexo-server插件：</p>
<p><code>sudo npm install hexo-server</code></p>
<p>本地启动：</p>
<p><code>hexo server //可简写为 hexo s</code></p>
<p>如果执行上面出错4000端口被占用，我们可以修改默认的端口<br>在_config.yml文件最后添加下面这几段代码（几率很小）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 4000</div><div class="line">  compress: true</div><div class="line">  header: true</div></pre></td></tr></table></figure>
<p>如果还是报错的话，那么请确定你是否是在你创建的文件夹下，也就是你安装的hexo文件夹下运行的命令（PS：很简单一点就是看看在你运行命令的地方能不能看到_config.yml文件）</p>
<p>然后就是见证奇迹的时刻，在浏览器中输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 。就可以看到啦！激动…<br>但是…..到这里你的博客还只能自己看到。别人看不到啊，怎么办？？？ 接着往下看…</p>
<h3 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h3><p>因为我是先研究的Github再研究的Hexo,所有Github早已经配置好啦，大概是这样的</p>
<ol>
<li>新建一个仓库 这里要注意的是 新建仓库的名字必须是 你的用户名.github.io </li>
<li>在刚才安装Hexo的文件夹下找到_config.yml文件，我们要对他进行修改了。（马上就可以让别人看到你的博客啦！）</li>
<li><p>用编辑器打开这个文件 拉到最下面进行修改(注意啊，每个冒号后面都有一个空格，别踩坑！)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: 这里填写你的Github仓库地址（去你Github那里直接复制过来）</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<pre><code>（文件的其他参数，我后面有写，先不要急！）
</code></pre></li>
</ol>
<p>安装用来部署到git上的插件：</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>执行部署（就跟项目上线差不多，执行了别人就能看到了，想好有没有BUG啊)</p>
<p><code>hexo deploy</code></p>
<h3 id="收到反馈，大部分人在部署这个地方出现了很多问题"><a href="#收到反馈，大部分人在部署这个地方出现了很多问题" class="headerlink" title="收到反馈，大部分人在部署这个地方出现了很多问题"></a>收到反馈，大部分人在部署这个地方出现了很多问题</h3><p>问题1：报错出现  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**place tell me who are you**</div></pre></td></tr></table></figure>
<p>原因：<br>可能是你第一次使用GitHub上传东西，所有要告诉他，你是谁，好吧，那就告诉他吧。<br>（PS：运行下面命令，请注意，使用git bush运行。命令行可能会不识别）</p>
<p>解决：<br>我是    <code>git config --global user.name &quot;yangyangyang&quot;</code><br>我的邮箱    <code>git config --global user.email &quot;yyy@qq.com&quot;</code><br>(PS: 你别真的把 我是。。。 我的邮箱。。打上去了)<br>然后可以查看配置是否成功</p>
<p><code>git config --list</code></p>
<p>然后生成秘钥 <code>ssh-keygen -t rsa -C &quot;yyy@qq.com&quot;</code> 应该是连续按三四个回车就OK<br>如果中间弹出个（y/n）输入个 y 接着回车<br>然后注意反馈的命令里面的这一句  </p>
<p><code>Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa)</code></p>
<p>括号后面的是路径，取那个路径取找 id_rsa.pub文件，记事本打开，复制里面的所有内容。<br>接着去github点你的头像，然后点下拉中的 Settings 然后看左边有个SSH and GPG keys 点进去<br>再点绿色的 New SSH key<br>然后 title 随便输入一个 key 中粘贴你刚才复制的东西<br>点击 下方绿色按钮 Add SSH key 好了 再回去执行 hexo deploy吧。</p>
<p>问题2：报错出现</p>
<p><code>error:failed to execute prompt script (exit code 1)</code></p>
<p> 那么恭喜你，麻烦了。<br> 原因：我猜测是配置文件的问题，也就是上面我们配置_config.yml文件的时候，没有配置好。<br> 解决：检查你的配置文件<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: 你仓库地址（HTTPS开头的）</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>看看格式是否正确 冒号后面必须跟空格，这几句的对齐方式也必须是这样的！！下面的缩进是两个空格，请不用使用 tab ！<br>检查完没问题，好的，再去执行一遍hexo deploy，还是报错，那么接着试</p>
<p>把配置文件改成这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 你仓库地址 （git开头的）</div><div class="line">  branch: master</div><div class="line">  name: 你github上的用户名</div><div class="line">  email: 你登陆github的邮箱</div></pre></td></tr></table></figure>
<p>（PS：取仓库地址—-&gt; 登陆上去后，在右上角点你的github头像，下拉菜单中点your profile，<br>然后找你刚才建的以你应户名然后.github.io结尾的仓库，点进去，右边有个绿色按钮，<br>点击后，下拉的面板中左上角出现Clone with HTTPS,那下面的文本框中就是你以HTTPS开头的仓库地址，<br>要使用git开头的，请点下拉面板中的右上角 Use SSH  然后复制下面的地址）</p>
<p>改完配置文件载执行 hexo deploy. 什么？还报错？ 那么我也没办法了！谷歌吧！</p>
<p><strong>大功告成！ 接下来就是见证奇迹时刻，在浏览器中输入 刚才你的仓库名 就是那个 你的用户名.github.io</strong></p>
<h2 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h2><p>每次对主题、文件等就行了修改，需要三步才能让你的博客让别人看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>要是感觉单词长 就这样写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo g -d</div></pre></td></tr></table></figure></p>
<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>一些常用的命令：</p>
<p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #将.deploy目录部署到GitHub<br>hexo help  #查看帮助<br>hexo version  #查看Hexo的版本</p>
<p>创建的文章，在source/_posts下，后缀是md，哦对了！这里面那个Helloworld.md那个文件可以删了,<br>看到就想起来当初看java的时候，配置完环境，第一条输入的hello world！！</p>
<h3 id="config-yml-文件的一些参数说明"><a href="#config-yml-文件的一些参数说明" class="headerlink" title="_config.yml 文件的一些参数说明"></a>_config.yml 文件的一些参数说明</h3><p>title 网站的标题<br>subtitle 网站的副标题<br>description 网站的描述<br>author 你的名字<br>language 网站的语言。使用2-lettter ISO-639-1代码。默认是en。（有填写规范的，别乱写）<br>timezone 网站的时区。Hexo默认使用计算机上的设置。你可以在这里找到可用的时区列表。一些例子<br>是America/New_York，Japan和UTC。 （同上）</p>
]]></content>
      
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
